# -*- coding: utf-8 -*-
"""Predicting & modeling stocks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HK-c5AGL1n6ghIGjhu-YBaVPSi3t_UJF
"""

import pandas as pd
import numpy as np
import matplotlib as math
import statsmodels as statmodel
import pandas_datareader as panda_reader
import datetime as datetime
import yfinance as yf # yfinance is used to manipulate stuff from yahoo finance (stocks, data, etc...)
import sklearn as sk
import matplotlib.pyplot as plt
from matplotlib.dates import date2num
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
#------------------------------------------------------------------------------------------------------------------------------------

                                                        #HOW TO MAKE TABLE FROM DATA

tickers = ['TSLA', 'AAPL','MSFT']
stocks = yf.download(tickers=tickers, start= '2000-1-29', end = '2023-11-24')
stocks.head()

stocks.to_csv("file.csv")

csv = pd.read_csv("file.csv", header= [0,1],index_col = 0)
(stocks.describe())

stocks.loc[:,"High"]

high = stocks.loc[:,"High"].copy()

pd.set_option('display.width', 1000)
#--------------------------------------------------------------------------------------------------------------------------------------

                                                                  #NORMAIZATION

appl = stocks.loc[:,("Close","AAPL")].to_frame()
high = stocks.loc[:,"High"].copy()
normalizehigh = high.div(high.iloc[0]).mul(100)

import matplotlib.pyplot as plt

plt.figure(figsize=(10,8))
plt.plot(normalizehigh)
plt.legend(loc = "upper left", labels = ["Apple","Microsoft", "Tesla"])
plt.xlabel("DATE")
plt.ylabel("Dollars")

plt.plot(stocks["High"])

#---------------------------------------------------------------------------------------------------------------------------------
#                                                       percentage change and other methods

apple = yf.download(tickers='AAPL', start= '2009-12-31', end = '2023-10-10')

apple_close = apple.loc[:, ("Close")].to_frame()

apple_close["lag1"]= apple_close.shift(periods =1)

apple_close['subtract'] = apple_close['Close'] - apple_close['lag1']

apple_close["% change"] = ((apple_close["Close"] / apple_close['lag1'] )-1).mul(100)

apple_close['% chng shortcut'] = apple_close["Close"].pct_change(periods =1).mul(100)
result = pd.concat([apple_close['Close'], apple_close['lag1'], apple_close['subtract'], apple_close["% change"], apple_close['% chng shortcut']], axis=1)

#-------------------------------------------------------------------------------------------------------------------------------------
apple = yf.download(tickers= "AAPL", start = "2009-12-31", end = "2023-10-9")

monthly_close = apple['Close'].resample('M').last()
print(monthly_close)
monthly_pchange = monthly_close.pct_change(periods = 1).mul(100)

monthly_pchange.plot(kind = "hist", figsize=[12,8], bins = 100)
print(monthly_pchange)

#-------------------------------------------------------------------------------------------------------------------------------------
                                                    # PREDICTING APPLE STOCK PRICE

apple['Date'] = apple.index
apple['Date'] = apple['Date'].map(date2num)
X = apple[['Date']]
y = apple['Close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

plt.figure(figsize=(14,7))
plt.plot(apple.index, apple['Close'], label='Actual Close Price')
plt.scatter(X_test['Date'], y_pred, color='red', label='Predicted Close Price')
plt.title('Apple Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()